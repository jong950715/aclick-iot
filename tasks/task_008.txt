# Task ID: 8
# Title: Event Management System
# Status: pending
# Dependencies: 6, 7
# Priority: medium
# Description: Implement event object model, state management, and persistence for tracking video clip status throughout the capture and transfer process.
# Details:
1. Event Model Implementation:
   - Create Protobuf definition for Event object with fields:
     * event_id: UUID String (RFC 4122 v4)
     * created_at: int64 (Unix timestamp, milliseconds)
     * status: enum (NEW=0, UPLOADING=1, DONE=2, RETRY=3, FAILED=4)
     * location: message with latitude, longitude, accuracy, timestamp
     * retry_count: int32
     * clip_path: String (local storage path)
     * error_message: String (optional)
   - Generate Dart code from Protobuf definition

2. State Management:
   - Implement Riverpod state providers for event tracking
   - Create event state transitions and validation
   - Add retry logic with exponential backoff
   - Implement event notifications for UI updates

3. Persistence:
   - IoT App: Use Room database for event queue management
   - Smartphone App: Implement Hive DB storage with TypeAdapters
   - Add FIFO-based storage management (max 32GB)
   - Create directory structure: /clips/{YYYY-MM}/{DD}/{event_id}.mp4

# Test Strategy:
1. Test event object serialization/deserialization
2. Verify state transitions and validation
3. Test persistence across app restarts
4. Validate retry logic and error handling
5. Measure database performance with large event counts
6. Test FIFO storage management
7. Verify directory structure creation and management

# Subtasks:
## 1. Implement Event Model with Protobuf [pending]
### Dependencies: None
### Description: Define and implement the Event data model using Protocol Buffers (Protobuf) for efficient serialization and cross-platform compatibility.
### Details:
Create .proto files defining the Event schema with all necessary fields (id, title, description, date, location, participants, etc.). Generate code for both IoT and smartphone platforms. Ensure the model supports all required event operations and validation rules. Include documentation for the schema design decisions.

## 2. Implement State Management with Riverpod [pending]
### Dependencies: 8.1
### Description: Develop a comprehensive state management solution using Riverpod to handle event data across the application.
### Details:
Create providers for event creation, retrieval, updating, and deletion. Implement state notifiers for reactive UI updates. Design a clean architecture that separates UI, business logic, and data layers. Include error handling and loading states. Ensure efficient state updates that minimize rebuilds.

## 3. Implement Persistence Layer for IoT and Smartphone Apps [pending]
### Dependencies: 8.1, 8.2
### Description: Develop persistence mechanisms to store and retrieve event data on both IoT devices and smartphones.
### Details:
For smartphones: Implement local storage using SQLite or Hive. For IoT devices: Create an efficient storage solution considering limited resources. Develop synchronization mechanisms between devices. Implement data migration strategies for schema updates. Add data backup and recovery features. Ensure thread-safe operations for concurrent access.

