# 개요  
대시캠 IoT 프로젝트는 차량에 장착된 대시캠에서 버튼 한 번으로 사고·위험 구간 영상을 운전자 스마트폰으로 자동 전송해 보관 및 공유할 수 있는 오프라인-친화형 솔루션입니다. 인터넷 연결 없이도 완전히 오프라인 환경에서 동작하며, 운전자는 물리적 버튼만 누르면 중요 영상이 스마트폰으로 자동 전송됩니다. 이 솔루션은 특히 사고 현장이나 위험 구간에서 즉각적인 영상 저장 및 공유가 필요한 운전자들에게 가치를 제공합니다.

# 핵심 기능  
## 원-클릭 영상 저장
- **기능**: 물리 버튼 한 번으로 중요 순간 영상 자동 저장
- **중요성**: 운전 중 조작 최소화로 안전성 향상, 사용자 경험 단순화
- **작동 방식**: BLE/GPIO를 통한 버튼 클릭 이벤트가 IoT 장치로 전달되어 RingBuffer에서 전후 30초 영상 자동 컷

## 완전 오프라인 전송 체계
- **기능**: 셀룰러 네트워크 없이도 스마트폰으로 영상 전송
- **중요성**: 통신 인프라 의존도 감소, 어디서나 안정적 작동
- **작동 방식**: Local Only Hotspot과 Bluetooth Classic을 활용한 직접 통신

## 고화질 원본 영상 유지
- **기능**: 인코딩 없이 원본 화질 그대로 전송
- **중요성**: 증거 자료로서의 가치 보존, 세부 정보 유지
- **작동 방식**: CameraX RingBuffer와 MediaMuxer를 활용한 키프레임 경계 복사

## 보안 통신 프로토콜
- **기능**: 암호화된 SSID/PW 전달 및 자체 TLS CA 활용
- **중요성**: 무단 접근 차단, 데이터 보안 유지
- **작동 방식**: RSA-2048 암호화, TLSv1.3, 자체 Root CA를 통한 인증서 Pinning

# 사용자 경험  
## 사용자 페르소나
- **일반 운전자**: 사고 증거 확보 필요, 기술에 능숙하지 않음
- **택시/버스 운전기사**: 장시간 운행 중 특정 상황 기록 필요
- **물류/배송 기사**: 배송 과정 중 특이사항 기록 필요

## 주요 사용자 흐름
1. 차량 시동 시 IoT 대시캠과 스마트폰 앱이 자동 연결됨
2. 중요 상황 발생 시 운전자가 물리 버튼 클릭
3. 스마트폰이 Local Hotspot 활성화하고 보안 연결 수립
4. IoT 장치가 전후 30초 영상을 컷팅하여 스마트폰으로 전송
5. 영상이 스마트폰에 저장되고 사용자에게 알림

## UI/UX 고려사항
- 대시보드: Hotspot/BT/Wi-Fi/Upload 상태 모니터링
- 갤러리: 저장된 영상 클립 Grid 형태로 표시
- 알림: 새 영상 도착 시 즉시 시스템 알림 생성
- 최소한의 사용자 조작으로 핵심 기능 수행

# 기술 아키텍처  
## 시스템 구성요소
1. **스마트폰 앱 (Receiver)**
   - 플랫폼: Android 10+, Flutter 3.29.3
   - 상태 관리: Riverpod (ChangeNotifierProvider, StateNotifierProvider)
   - 주요 기술:
     * Local Only Hotspot (WifiManager.LocalOnlyHotspotReservation)
     * Bluetooth Classic SPP (UUID: 00001101-0000-1000-8000-00805F9B34FB)
     * Jetty HTTPS 서버 (8443 포트, TLSv1.3 전용)
     * Platform Channels for Native API 액세스
     * Hive DB (이벤트 저장 및 파일 메타데이터)

2. **IoT 앱 (Transmitter, 초기 Mock)**
   - 플랫폼: Android (라즈베리 Pi 4 등 대체 목업)
   - 상태 관리: Riverpod
   - 주요 기술:
     * CameraX (SessionConfiguration.Builder, VideoCapture, Preview)
     * Bluetooth SPP 클라이언트 (BluetoothAdapter.listenUsingRfcommWithServiceRecord)
     * WifiNetworkSpecifier (WifiNetworkSpecifier.Builder, NetworkRequest)
     * multipart HTTP POST (Dio 패키지, FormData, ChunkedUploader)
     * SharedPreferences (자격 증명 및 이벤트 상태 저장)

3. **물리 버튼**
   - 하드웨어: nRF52840 Dev Kit (향후 자체 MCU)
   - 기능: GPIO-BLE 전송(클릭) → IoT로 유선/무선 연결
   - 인터페이스: BLE Custom Service (UUID: 0000FFE0-0000-1000-8000-00805F9B34FB)

## 프로젝트 구성
- 즉, 이 프로젝트는 2개의 Flutter 안드로이드 앱 (**스마트폰 앱**과 **IoT Mocking 앱**)을 포함
- Mono-repo 구조 (apps/phone, apps/iot, packages/core)
- packages/core는 공유 모듈 (이벤트 모델, 암호화 유틸리티, 네트워크 프로토콜)

## 데이터 모델
- **Event**: 버튼 클릭 시 생성되는 이벤트 객체 (Protobuf 정의)
  - 상태: NEW→UPLOADING→DONE/RETRY
  - 필드:
    * event_id: UUID String (RFC 4122 v4)
    * created_at: int64 (Unix 타임스탬프, 밀리초)
    * status: enum (NEW=0, UPLOADING=1, DONE=2, RETRY=3, FAILED=4)
    * location: message Location {
      double latitude;
      double longitude;
      float accuracy;
      int64 timestamp;
    }
    * retry_count: int32
    * clip_path: String (로컬 저장 경로)
    * error_message: String (선택적)

- **Clip**: 영상 클립 파일
  - 파일 형식: MP4 (H.264 비디오 + AAC 오디오)
  - 메타데이터 (EXIF 및 커스텀 헤더):
    * event_id: String (매칭 이벤트)
    * created_at: DateTime ISO 8601 포맷
    * location: GeoJSON 포맷 (가능 시)
    * file_size: int64 (바이트)
    * duration: float (초)
    * resolution: String (예: "1280x720")
    * fps: int32 (예: 30)
    * sha256: String (무결성 검증용)

- **Storage**: 파일 저장소 관리
  - FIFO 기반 저장 관리 (최대 32GB)
  - Hive DB를 통한 메타데이터 인덱싱
  - 디렉토리 구조: /clips/{YYYY-MM}/{DD}/{event_id}.mp4

## API 및 통합
- **Bluetooth Classic 프로토콜**:
  - SPP 프로파일 (Serial Port Profile)
  - 연결 상태: DISCONNECTED → CONNECTING → CONNECTED → AUTHENTICATED
  - 명령어 형식: JSON 페이로드 {"cmd": "string", "data": object}
  - 주요 명령어:
    * "pair": 초기 페어링 및 키 교환
    * "hotspot_request": Hotspot 활성화 요청
    * "event_notify": 이벤트 생성 알림

- **HTTPS API**:
  - 서버: Jetty 임베디드 (8443 포트)
  - TLS: v1.3 전용, ECDHE-RSA-AES256-GCM-SHA384 암호화 스위트
  - 엔드포인트:
    * `POST /clips`: 영상 파일 업로드 (multipart/form-data)
      - 헤더: Authorization: Bearer {JWT}
      - 필드: event_id, file, metadata (JSON)
      - 응답: 201 Created + event_id
    * `GET /status`: 서버 상태 확인
      - 응답: 200 OK + {"status": "ready", "version": "x.y.z"}

- **암호화 및 보안**:
  - JWT 구조: Header.Payload.Signature
    * 알고리즘: HMAC SHA-256
    * 페이로드: {"event_id": "uuid", "iat": timestamp, "exp": timestamp+300}
  - RSA 키 교환 (2048비트)
    * 공개키: X.509 PEM 형식
    * 암호화: OAEP 패딩, SHA-256
  - 자체 Root CA:
    * 알고리즘: RSA-4096 + SHA-256
    * 유효기간: 10년 (개발용)

## 인프라 요구사항
- **자체 Root CA 인프라**:
  - 키 생성 스크립트: tools/gen_keys.sh (OpenSSL 기반)
  - 인증서 체인: root_ca → device_certs
  - 키 저장소:
    * 안드로이드: KeyStore API (AndroidKeyStore provider)
    * Flutter: 암호화된 SharedPreferences

- **Local Storage 아키텍처**:
  - 스마트폰 앱:
    * Clip 저장: getExternalStoragePublicDirectory(DIRECTORY_MOVIES)
    * 메타데이터: Hive DB (암호화, TypeAdapters 사용)
    * 캐시 관리: 최대 32GB, FIFO 삭제 정책
  - IoT 앱:
    * RingBuffer: 앱 내부 캐시 (Context.getCacheDir())
    * 임시 저장: getExternalFilesDir(null)
    * 이벤트 큐: Room 데이터베이스 (재시도 관리)

- **메모리 관리**:
  - RingBuffer 구현: CameraX API + WeakReference 캐싱
  - 메모리 요구사항:
    * 720p (30초): ~215MB RAM
    * 1080p (30초): ~480MB RAM
  - 가비지 컬렉션 최적화:
    * 객체 풀링 (ByteBuffer reuse)
    * offscreen 처리를 위한 백그라운드 스레드 (HandlerThread)
    * 메모리 한계 감지 및 해상도 자동 조정

# 개발 로드맵  
## MVP 요구사항
### 0. 착수·환경 세팅 (1주)
- Git mono-repo 생성 (/apps/phone, /apps/iot, /packages/core)
- CI/CD 파이프라인 구축 (GitHub Actions)
- 코드 컨벤션 및 PR 워크플로 문서화

### 1. Hotspot & Bluetooth Classic 연결 (1주)
- 스마트폰측: HotspotManager, BtClassicServer 구현
- IoT측: BtClassicClient, PageScanHandler 구현
- 시동 시 자동 연결 및 페어링 검증

### 2. 보안 채널 및 Wi-Fi 접속 자동화 (1주)
- 자체 Root CA 및 인증서 생성 스크립트
- 키 교환 서비스 및 보안 프로토콜 구현
- SSID/PW 암호화 전송 및 자동 WiFi 조인

### 3. 클립 서버 및 영상 RingBuffer 구현 (1주)
- 스마트폰측: HTTPS 서버 및 인증서 pinning
- IoT측: 영상 RingBuffer, 클립 컷팅, 업로더 구현
- 버튼 클릭 후 파일 전송 검증

### 4. 이벤트 객체 및 재시도 로직 (1주)
- 이벤트 프로토콜 정의 및 코드 생성
- 이벤트 저장소 및 상태 관리 구현
- 실패 시 재시도 및 복구 메커니즘

### 5. UI 및 최종 문서화 (1주)
- 대시보드 및 갤러리 UI 구현
- 아키텍처 및 배포 문서 작성
- 전체 시스템 통합 및 검증

## 향후 개선사항
- 실제 IoT 하드웨어로 전환 (Android → 라즈베리 Pi → 커스텀 MCU)
- 영상 분석 및 AI 위험 상황 감지 기능
- 클라우드 백업 옵션 (인터넷 연결 시)
- 다중 카메라 지원 및 360도 뷰 통합

# 논리적 의존성 체인
## 기초 구성요소 (우선 개발)
1. **통신 기반**: Bluetooth Classic 연결 및 Local Hotspot 구현
2. **보안 프로토콜**: RSA 공개키 교환 및 인증서 인프라
3. **카메라 시스템**: RingBuffer 및 클립 컷팅 메커니즘

## 실행 가능한 프론트엔드 우선 개발
1. **스마트폰 앱 기본 UI**: 상태 모니터링 및 간단한 갤러리
2. **이벤트 관리 시스템**: 사용자 알림 및 상태 표시
3. **파일 관리**: 기본적인 저장 및 조회 기능

## 단계별 기능 확장
1. **통신 → 보안 → 영상처리** 순으로 구현
2. **기본 기능 → 상태 관리 → 오류 처리 → UI 개선**
3. **MVP → 테스트 → 문서화 → 배포**

# 위험 요소 및 완화 전략  
## 기술적 도전
- **위험**: Bluetooth 연결 불안정성
  **완화**:
  - 연결 상태 변경 리스너 구현 (BluetoothDevice.ACTION_ACL_DISCONNECTED)
  - 지수 백오프 재연결 알고리즘 (최대 5회, 간격 2ⁿ 초)
  - 연결 품질 모니터링 (rssi 체크, -80dBm 미만 시 경고)
  - 타임아웃 설정: 연결 15초, 데이터 전송 30초

- **위험**: 대용량 영상 전송 지연
  **완화**:
  - 청크 기반 멀티파트 전송 (512KB 청크)
  - 적응형 전송 속도 조절 (네트워크 상태 감지)
  - 프로그레스 바 및 실시간 전송률 표시
  - 백그라운드 전송 서비스 (WorkManager 활용)
  - 실패 지점부터 재개 가능한 업로드 구현

- **위험**: 메모리 제약으로 인한 RingBuffer 오류
  **완화**:
  - ActivityManager.getMemoryClass()로 기기 메모리 용량 감지
  - 메모리 임계치 기반 해상도 자동 조정 (1080p → 720p)
  - 메모리 사용량 실시간 모니터링 (Debug.getNativeHeapAllocatedSize())
  - WeakReference 캐싱 및 LRU (Least Recently Used) 전략
  - OutOfMemoryError 핸들러와 복구 메커니즘

## MVP 구성 최적화
- **위험**: 기능 범위 확장으로 일정 지연
  **완화**: 명확한 MVP 정의, 단계별 접근 방식, 엄격한 우선순위 지정

- **위험**: 하드웨어 종속성으로 인한 개발 지연
  **완화**: 초기 단계에서 소프트웨어 목업 사용, 인터페이스 추상화

## 자원 제약
- **위험**: 성능 및 배터리 효율성
  **완화**: 에너지 효율적인 통신 패턴, 최적화된 코드

- **위험**: 저장 공간 한계
  **완화**: 지능형 저장 관리, 오래된 데이터 자동 정리

# 부록  
## 연구 결과
- **Bluetooth Classic SPP vs BLE 성능 비교**:
  - SPP 처리량: ~115 kbps (실제 테스트)
  - BLE 처리량: ~58 kbps (GATT, MTU=512)
  - 레이턴시: SPP ~12ms, BLE ~8ms
  - 배터리 효율: SPP < BLE (약 35% 차이)
  - 선택 이유: 처리량 우선, 페어링 기능 기존 구현 활용

- **네트워크 토폴로지 테스트 결과**:
  | 구성                      | 평균 전송 속도 | 연결 시간 | 보안성 | 선택 |  
  |----------------------------|--------------|-----------|--------|------|
  | Direct Wi-Fi P2P          | 18 MB/s      | 12-15s    | 중     | X    |
  | BT Tethering              | 0.8 MB/s     | 5-7s      | 중     | X    |
  | Local Only Hotspot        | 22 MB/s      | 3-5s      | 높음   | O    |
  | Infrastructure Wi-Fi      | 15 MB/s      | N/A       | 중     | X    |

- **카메라 해상도별 RingBuffer 메모리 요구사항**:
  | 해상도 | FPS | 초당 평균 데이터 | 60초 버퍼 크기 | 메모리 요구사항 |
  |--------|-----|----------------|--------------|----------------|
  | 720p   | 30  | ~0.9 MB/s      | ~54 MB       | ~215 MB        |
  | 1080p  | 30  | ~2.1 MB/s      | ~126 MB      | ~480 MB        |
  | 1440p  | 30  | ~3.7 MB/s      | ~222 MB      | ~850 MB        |
  | 2160p  | 30  | ~8.3 MB/s      | ~498 MB      | 불가능          |

## 기술 명세
- **카메라 스펙**:
  - 해상도: 720p/1080p
  - 프레임 레이트: 30fps (고정)
  - 인코딩: H.264 (Baseline Profile, Level 4.1)
  - 비트레이트: VBR (목표 2-4 Mbps @720p, 4-8 Mbps @1080p)
  - 오디오: AAC-LC, 48kHz, 스테레오, 128kbps

- **통신 프로토콜 세부사항**:
  - Bluetooth:
    * Classic SPP: UUID 00001101-0000-1000-8000-00805F9B34FB
    * 보안 모드: SSP (Secure Simple Pairing)
    * 인증: MITM 보호 모드 4
  - Wi-Fi:
    * 표준: 802.11ac
    * 채널: 자동 (간섭 최소화)
    * 보안: WPA2-PSK (AES)

- **버튼 인터페이스**:
  - nRF52840 GPIO 핀 구성:
    * P0.13: 입력, 내부 풀업, 엣지 감지 인터럽트
    * P0.14: LED 상태 표시
  - BLE 서비스: 
    * 서비스 UUID: 0000FFE0-0000-1000-8000-00805F9B34FB
    * 특성 UUID: 0000FFE1-0000-1000-8000-00805F9B34FB (알림 지원)
    * 데이터 형식: 단일 바이트 (0x01 = 클릭)

- **파일 사양**:
  - 컨테이너: MP4 (ISO/IEC 14496-14)
  - 메타데이터: XMP (Adobe 확장)
  - 30초 기준 파일 크기:
    * 720p = 15-20MB (평균 17.5MB)
    * 1080p = 25-35MB (평균 32MB)

- **보안 규격**:
  - TLS: v1.3 전용
  - 암호화 스위트: ECDHE-RSA-AES256-GCM-SHA384
  - 키 길이: RSA 2048-bit, AES 256-bit
  - 인증서 유효기간: 1년 (장치), 10년 (루트 CA)

- **품질 요구사항**:
  - 단위 테스트 커버리지 ≥ 60%
  - 통합 테스트: 핵심 사용자 흐름 100% 커버
  - 정적 코드 분석: Lint 100% 패스
  - 성능 기준:
    * 버튼 클릭 → 파일 저장 완료: ≤ 12초 (720p 기준)
    * 메모리 누수: 24시간 연속 작동 후 < 5%
    * CPU 사용량: 대기 중 < 1%, 처리 중 < 40%
